# streamlit_app.py - VERS√ÉO FINAL COM OTIMIZA√á√ÉO DE MEM√ìRIA

import streamlit as st
import requests
import json
import cohere
import gspread
from PIL import Image
import time
import re
import pandas as pd
from datetime import datetime
from io import BytesIO
import urllib.parse
from dateutil.relativedelta import relativedelta
# Imports pesados foram removidos daqui e movidos para dentro das fun√ß√µes

# --- MOTOR DE REGRAS: CALEND√ÅRIO NACIONAL DE IMUNIZA√á√ïES (PNI) ---
CALENDARIO_PNI = [
    {"vacina": "BCG", "dose": "Dose √önica", "idade_meses": 0, "detalhe": "Protege contra formas graves de tuberculose."},
    # ... cole o resto do seu calend√°rio aqui ...
]

# --- Fun√ß√µes de Valida√ß√£o e Utilit√°rias ---
def validar_cpf(cpf: str) -> bool:
    cpf = ''.join(re.findall(r'\d', str(cpf)))
    if not cpf or len(cpf) != 11 or cpf == cpf[0] * 11: return False
    try:
        soma = sum(int(cpf[i]) * (10 - i) for i in range(9)); d1 = (soma * 10 % 11) % 10
        if d1 != int(cpf[9]): return False
        soma = sum(int(cpf[i]) * (11 - i) for i in range(10)); d2 = (soma * 10 % 11) % 10
        if d2 != int(cpf[10]): return False
    except: return False
    return True
# ... (cole suas outras fun√ß√µes utilit√°rias como validar_data_nascimento, etc. aqui) ...

def ler_texto_prontuario(file_bytes, ocr_api_key):
    # OTIMIZA√á√ÉO: Importa a biblioteca pesada apenas quando a fun√ß√£o √© chamada
    from pdf2image import convert_from_bytes
    # ... (seu c√≥digo da fun√ß√£o aqui) ...
    pass

# --- Fun√ß√µes de Conex√£o e API ---
@st.cache_resource
def conectar_planilha():
    # ... (seu c√≥digo da fun√ß√£o aqui) ...
    pass

@st.cache_data(ttl=300)
def ler_dados_da_planilha(_planilha):
    # ... (seu c√≥digo da fun√ß√£o aqui) ...
    pass

# ... (suas outras fun√ß√µes de API como ocr_space_api, extrair_dados_com_cohere, etc. aqui) ...

def salvar_no_sheets(dados, planilha):
    # ... (seu c√≥digo da fun√ß√£o aqui) ...
    pass

# --- FUN√á√ïES DE GERA√á√ÉO DE PDF (OTIMIZADAS) ---
def preencher_pdf_formulario(paciente_dados):
    # OTIMIZA√á√ÉO: Importa bibliotecas pesadas aqui dentro
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import A4
    from reportlab.lib.units import cm
    from pypdf import PdfReader, PdfWriter
    
    # IMPORTANTE: Garanta que este ficheiro PDF est√° no seu reposit√≥rio GitHub!
    template_pdf_path = "Formulario_2IndiceDeVulnerabilidadeClinicoFuncional20IVCF20_ImpressoraPDFPreenchivel_202404-2.pdf"
    
    try:
        # ... (seu c√≥digo completo de preencher o PDF aqui) ...
        pass
    except FileNotFoundError:
        st.error(f"Erro: O arquivo modelo '{template_pdf_path}' n√£o foi encontrado no reposit√≥rio.")
        return None
    except Exception as e:
        st.error(f"Ocorreu um erro ao gerar o PDF: {e}")
        return None

def gerar_pdf_etiquetas(familias_para_gerar):
    # OTIMIZA√á√ÉO: Importa bibliotecas pesadas aqui dentro
    from reportlab.pdfgen import canvas
    from reportlab.lib.pagesizes import A4
    from reportlab.lib.units import cm
    from reportlab.lib.utils import ImageReader
    import qrcode
    
    # ... (seu c√≥digo completo de gerar etiquetas aqui) ...
    pass

# ... (suas outras fun√ß√µes de gerar PDF aqui, com os imports dentro delas) ...


# --- P√ÅGINAS DO APP ---
def pagina_dashboard(planilha):
    # OTIMIZA√á√ÉO: Importa matplotlib aqui dentro
    import matplotlib.pyplot as plt
    st.title("üìä Dashboard de Dados")
    # ... (seu c√≥digo completo da p√°gina do dashboard aqui) ...

# ... (todas as suas outras fun√ß√µes de p√°gina como pagina_coleta, pagina_pesquisa, etc. aqui) ...

def main():
    # ... (seu c√≥digo completo da fun√ß√£o main, com o roteador de p√°ginas, aqui) ...
    pass

if __name__ == "__main__":
    main()
