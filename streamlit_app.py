import streamlit as st
import requests
import json
import cohere
import gspread
from PIL import Image
import time
import re
import pandas as pd
from datetime import datetime
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import landscape, A4, letter
from reportlab.lib.units import inch, cm
from io import BytesIO
import urllib.parse
import qrcode
from reportlab.lib.utils import ImageReader
import matplotlib.pyplot as plt
from pypdf import PdfReader, PdfWriter
from reportlab.lib.colors import HexColor
from dateutil.relativedelta import relativedelta

# --- MOTOR DE REGRAS: CALEND√ÅRIO NACIONAL DE IMUNIZA√á√ïES (PNI) ---
CALENDARIO_PNI = [
    {"vacina": "BCG", "dose": "Dose √önica", "idade_meses": 0, "detalhe": "Protege contra formas graves de tuberculose."},
    {"vacina": "Hepatite B", "dose": "1¬™ Dose", "idade_meses": 0, "detalhe": "Primeira dose, preferencialmente nas primeiras 12-24 horas de vida."},
    {"vacina": "Pentavalente", "dose": "1¬™ Dose", "idade_meses": 2, "detalhe": "Protege contra Difteria, T√©tano, Coqueluche, Hepatite B e Haemophilus influenzae B."},
    {"vacina": "VIP (Poliomielite inativada)", "dose": "1¬™ Dose", "idade_meses": 2, "detalhe": "Protege contra a poliomielite."},
    {"vacina": "Pneumoc√≥cica 10V", "dose": "1¬™ Dose", "idade_meses": 2, "detalhe": "Protege contra doen√ßas pneumoc√≥cicas."},
    {"vacina": "Rotav√≠rus", "dose": "1¬™ Dose", "idade_meses": 2, "detalhe": "Idade m√°xima para iniciar o esquema: 3 meses e 15 dias."},
    {"vacina": "Meningoc√≥cica C", "dose": "1¬™ Dose", "idade_meses": 3, "detalhe": "Protege contra a meningite C."},
    {"vacina": "Pentavalente", "dose": "2¬™ Dose", "idade_meses": 4, "detalhe": "Refor√ßo da prote√ß√£o."},
    {"vacina": "VIP (Poliomielite inativada)", "dose": "2¬™ Dose", "idade_meses": 4, "detalhe": "Refor√ßo da prote√ß√£o."},
    {"vacina": "Pneumoc√≥cica 10V", "dose": "2¬™ Dose", "idade_meses": 4, "detalhe": "Refor√ßo da prote√ß√£o."},
    {"vacina": "Rotav√≠rus", "dose": "2¬™ Dose", "idade_meses": 4, "detalhe": "Idade m√°xima para a √∫ltima dose: 7 meses e 29 dias."},
    {"vacina": "Meningoc√≥cica C", "dose": "2¬™ Dose", "idade_meses": 5, "detalhe": "Refor√ßo da prote√ß√£o."},
    {"vacina": "Pentavalente", "dose": "3¬™ Dose", "idade_meses": 6, "detalhe": "Finaliza√ß√£o do esquema prim√°rio."},
    {"vacina": "VIP (Poliomielite inativada)", "dose": "3¬™ Dose", "idade_meses": 6, "detalhe": "Finaliza√ß√£o do esquema prim√°rio."},
    {"vacina": "Febre Amarela", "dose": "Dose Inicial", "idade_meses": 9, "detalhe": "Prote√ß√£o contra a febre amarela. Refor√ßo aos 4 anos."},
    {"vacina": "Tr√≠plice Viral", "dose": "1¬™ Dose", "idade_meses": 12, "detalhe": "Protege contra Sarampo, Caxumba e Rub√©ola."},
    {"vacina": "Pneumoc√≥cica 10V", "dose": "Refor√ßo", "idade_meses": 12, "detalhe": "Dose de refor√ßo."},
    {"vacina": "Meningoc√≥cica C", "dose": "Refor√ßo", "idade_meses": 12, "detalhe": "Dose de refor√ßo."},
]

# --- Interface Streamlit ---
st.set_page_config(page_title="Coleta Inteligente", page_icon="ü§ñ", layout="wide")

# --- Fun√ß√µes de Valida√ß√£o e Utilit√°rias ---
def validar_cpf(cpf: str) -> bool:
    cpf = ''.join(re.findall(r'\d', str(cpf)))
    if not cpf or len(cpf) != 11 or cpf == cpf[0] * 11: return False
    try:
        soma = sum(int(cpf[i]) * (10 - i) for i in range(9)); d1 = (soma * 10 % 11) % 10
        if d1 != int(cpf[9]): return False
        soma = sum(int(cpf[i]) * (11 - i) for i in range(10)); d2 = (soma * 10 % 11) % 10
        if d2 != int(cpf[10]): return False
    except: return False
    return True

def validar_data_nascimento(data_str: str) -> (bool, str):
    try:
        data_obj = datetime.strptime(data_str, '%d/%m/%Y').date()
        if data_obj > datetime.now().date(): return False, "A data de nascimento est√° no futuro."
        return True, ""
    except ValueError: return False, "O formato da data deve ser DD/MM/AAAA."

def calcular_idade(data_nasc):
    if pd.isna(data_nasc): return 0
    hoje = datetime.now()
    return hoje.year - data_nasc.year - ((hoje.month, hoje.day) < (data_nasc.month, data_nasc.day))

def analisar_carteira_vacinacao(data_nascimento_str, vacinas_administradas):
    try:
        data_nascimento = datetime.strptime(data_nascimento_str, "%d/%m/%Y")
    except ValueError:
        return {"erro": "Formato da data de nascimento inv√°lido. Utilize DD/MM/AAAA."}

    hoje = datetime.now()
    idade = relativedelta(hoje, data_nascimento)
    idade_total_meses = idade.years * 12 + idade.months
    vacinas_tomadas_set = {(v['vacina'], v['dose']) for v in vacinas_administradas}
    relatorio = {"em_dia": [], "em_atraso": [], "proximas_doses": []}

    for regra in CALENDARIO_PNI:
        vacina_requerida = (regra['vacina'], regra['dose'])
        idade_recomendada_meses = regra['idade_meses']
        if idade_total_meses >= idade_recomendada_meses:
            if vacina_requerida in vacinas_tomadas_set:
                relatorio["em_dia"].append(regra)
            else:
                relatorio["em_atraso"].append(regra)
        else:
            relatorio["proximas_doses"].append(regra)
    return relatorio

# --- Fun√ß√µes de Conex√£o e API ---
@st.cache_resource
def conectar_planilha():
    try:
        creds = st.secrets["gcp_service_account"]
        client = gspread.service_account_from_dict(creds)
        sheet = client.open_by_key(st.secrets["SHEETSID"]).sheet1
        return sheet
    except Exception as e:
        st.error(f"Erro ao conectar com o Google Sheets: {e}"); return None

@st.cache_data(ttl=300)
def ler_dados_da_planilha(_planilha):
    try:
        dados = _planilha.get_all_records()
        df = pd.DataFrame(dados)
        colunas_esperadas = ["ID", "FAM√çLIA", "Nome Completo", "Data de Nascimento", "Telefone", "CPF", "Nome da M√£e", "Nome do Pai", "Sexo", "CNS", "Munic√≠pio de Nascimento", "Link do Prontu√°rio", "Link da Pasta da Fam√≠lia", "Condi√ß√£o", "Data de Registo", "Ra√ßa/Cor"]
        for col in colunas_esperadas:
            if col not in df.columns: df[col] = ""
        df['Data de Nascimento DT'] = pd.to_datetime(df['Data de Nascimento'], format='%d/%m/%Y', errors='coerce')
        df['Idade'] = df['Data de Nascimento DT'].apply(lambda dt: calcular_idade(dt) if pd.notnull(dt) else 0)
        return df
    except Exception as e:
        st.error(f"Erro ao ler os dados da planilha: {e}"); return pd.DataFrame()

def ocr_space_api(file_bytes, ocr_api_key):
    try:
        url = "https://api.ocr.space/parse/image"
        payload = {"language": "por", "isOverlayRequired": False, "OCREngine": 2}
        files = {"file": ("ficha.jpg", file_bytes, "image/jpeg")}
        headers = {"apikey": ocr_api_key}
        response = requests.post(url, data=payload, files=files, headers=headers)
        response.raise_for_status()
        result = response.json()
        if result.get("IsErroredOnProcessing"): st.error(f"Erro no OCR: {result.get('ErrorMessage')}"); return None
        return result["ParsedResults"][0]["ParsedText"]
    except Exception as e:
        st.error(f"Erro inesperado no OCR: {e}"); return None

def extrair_dados_com_cohere(texto_extraido: str, cohere_client):
    try:
        prompt = f"""
        Sua tarefa √© extrair informa√ß√µes de um texto de formul√°rio de sa√∫de e convert√™-lo para um JSON.
        Procure por uma anota√ß√£o √† m√£o que pare√ßa um c√≥digo de fam√≠lia (ex: 'FAM111'). Este c√≥digo deve ir para a chave "FAM√çLIA".
        Retorne APENAS um objeto JSON com as chaves: 'ID', 'FAM√çLIA', 'Nome Completo', 'Data de Nascimento', 'Telefone', 'CPF', 'Nome da M√£e', 'Nome do Pai', 'Sexo', 'CNS', 'Munic√≠pio de Nascimento'.
        Se um valor n√£o for encontrado, retorne uma string vazia "".
        Texto para analisar: --- {texto_extraido} ---
        """
        response = cohere_client.chat(model="command-r-plus", message=prompt, temperature=0.1)
        json_string = response.text.replace('```json', '').replace('```', '').strip()
        return json.loads(json_string)
    except Exception as e:
        st.error(f"Erro ao chamar a API do Cohere: {e}"); return None
        
def extrair_dados_vacinacao_com_cohere(texto_extraido: str, cohere_client):
    prompt = f"""
    Sua tarefa √© atuar como um agente de sa√∫de especializado em analisar textos de cadernetas de vacina√ß√£o brasileiras.
    O texto fornecido foi extra√≠do por OCR e pode conter erros. Sua miss√£o √© extrair as informa√ß√µes e retorn√°-las em um formato JSON estrito.
    Instru√ß√µes:
    1.  Identifique o Nome do Paciente.
    2.  Identifique a Data de Nascimento no formato DD/MM/AAAA.
    3.  Liste as Vacinas Administradas, normalizando os nomes para um padr√£o. Exemplos: "Penta" -> "Pentavalente"; "Polio" ou "VIP" -> "VIP (Poliomielite inativada)"; "Meningo C" -> "Meningoc√≥cica C"; "Sarampo, Caxumba, Rub√©ola" -> "Tr√≠plice Viral".
    4.  Para cada vacina, identifique a dose (ex: "1¬™ Dose", "Refor√ßo"). Se n√£o for clara, infira pela ordem.
    5.  Retorne APENAS um objeto JSON com as chaves "nome_paciente", "data_nascimento", "vacinas_administradas" (lista de objetos com "vacina" e "dose").
    Se uma informa√ß√£o n√£o for encontrada, retorne um valor vazio ("") ou uma lista vazia ([]).
    Texto para analisar: --- {texto_extraido} ---
    """
    try:
        response = cohere_client.chat(model="command-r-plus", message=prompt, temperature=0.2)
        json_string = response.text.strip()
        if json_string.startswith("```json"): json_string = json_string[7:]
        if json_string.endswith("```"): json_string = json_string[:-3]
        dados_extraidos = json.loads(json_string.strip())
        if "nome_paciente" in dados_extraidos and "data_nascimento" in dados_extraidos and "vacinas_administradas" in dados_extraidos:
            return dados_extraidos
        else: return None
    except Exception as e:
        st.error(f"Erro ao processar a resposta da IA: {e}")
        return None

def salvar_no_sheets(dados, planilha):
    try:
        cabecalhos = planilha.row_values(1)
        if 'ID' not in dados or not dados['ID']: dados['ID'] = f"ID-{int(time.time())}"
        dados['Data de Registo'] = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        nova_linha = [dados.get(cabecalho, "") for cabecalho in cabecalhos]
        planilha.append_row(nova_linha)
        st.success(f"‚úÖ Dados de '{dados.get('Nome Completo', 'Desconhecido')}' salvos com sucesso!")
        st.balloons()
        st.cache_data.clear()
    except Exception as e:
        st.error(f"Erro ao salvar na planilha: {e}")

# ... (Fun√ß√µes de PDF: preencher_pdf_formulario, gerar_pdf_etiquetas, gerar_pdf_capas_prontuario, gerar_pdf_relatorio_vacinacao)
def gerar_pdf_relatorio_vacinacao(nome_paciente, data_nascimento, relatorio):
    pdf_buffer = BytesIO()
    can = canvas.Canvas(pdf_buffer, pagesize=A4)
    largura_pagina, altura_pagina = A4
    COR_PRINCIPAL, COR_SECUNDARIA, COR_SUCESSO, COR_ALERTA, COR_INFO = HexColor('#2c3e50'), HexColor('#7f8c8d'), HexColor('#27ae60'), HexColor('#e67e22'), HexColor('#3498db')
    can.setFont("Helvetica-Bold", 16)
    can.setFillColor(COR_PRINCIPAL)
    can.drawCentredString(largura_pagina / 2, altura_pagina - 3 * cm, "Relat√≥rio de Situa√ß√£o Vacinal")
    can.setFont("Helvetica", 10)
    can.setFillColor(COR_SECUNDARIA)
    can.drawString(2 * cm, altura_pagina - 4.5 * cm, f"Paciente: {nome_paciente}")
    can.drawString(2 * cm, altura_pagina - 5 * cm, f"Data de Nascimento: {data_nascimento}")
    data_emissao = datetime.now().strftime("%d/%m/%Y √†s %H:%M")
    can.drawRightString(largura_pagina - 2 * cm, altura_pagina - 4.5 * cm, f"Emitido em: {data_emissao}")
    can.setStrokeColor(HexColor('#dddddd'))
    can.line(2 * cm, altura_pagina - 5.5 * cm, largura_pagina - 2 * cm, altura_pagina - 5.5 * cm)
    def desenhar_secao(titulo, cor_titulo, lista_vacinas, y_inicial):
        can.setFont("Helvetica-Bold", 12)
        can.setFillColor(cor_titulo)
        y_atual = y_inicial
        can.drawString(2 * cm, y_atual, titulo)
        y_atual -= 0.7 * cm
        if not lista_vacinas:
            can.setFont("Helvetica-Oblique", 10)
            can.setFillColor(COR_SECUNDARIA)
            can.drawString(2.5 * cm, y_atual, "Nenhuma vacina nesta categoria.")
            y_atual -= 0.7 * cm
            return y_atual
        can.setFont("Helvetica", 10)
        can.setFillColor(COR_PRINCIPAL)
        for vac in lista_vacinas:
            texto = f"‚Ä¢ {vac['vacina']} ({vac['dose']}) - Idade recomendada: {vac['idade_meses']} meses."
            can.drawString(2.5 * cm, y_atual, texto)
            y_atual -= 0.6 * cm
        y_atual -= 0.5 * cm
        return y_atual
    y_corpo = altura_pagina - 6.5 * cm
    y_corpo = desenhar_secao("‚ö†Ô∏è Vacinas com Pend√™ncia (Atraso)", COR_ALERTA, relatorio["em_atraso"], y_corpo)
    proximas_ordenadas = sorted(relatorio["proximas_doses"], key=lambda x: x['idade_meses'])
    y_corpo = desenhar_secao("üóìÔ∏è Pr√≥ximas Doses Recomendadas", COR_INFO, proximas_ordenadas, y_corpo)
    y_corpo = desenhar_secao("‚úÖ Vacinas em Dia", COR_SUCESSO, relatorio["em_dia"], y_corpo)
    can.save()
    pdf_buffer.seek(0)
    return pdf_buffer

# --- P√ÅGINAS DO APP ---
# ... (p√°ginas existentes)
def pagina_analise_vacinacao(planilha, co_client):
    st.title("üíâ An√°lise Automatizada de Caderneta de Vacina√ß√£o")

    if 'uploaded_file_id' not in st.session_state:
        st.session_state.dados_extraidos = None
        st.session_state.relatorio_final = None

    uploaded_file = st.file_uploader("Envie a foto da caderneta de vacina√ß√£o:", type=["jpg", "jpeg", "png"])

    if uploaded_file is not None:
        st.session_state.uploaded_file_id = uploaded_file.id
        if st.session_state.get('dados_extraidos') is None:
            with st.spinner("Processando imagem e extraindo dados com IA..."):
                texto_extraido = ocr_space_api(uploaded_file.getvalue(), st.secrets["OCRSPACEKEY"])
                if texto_extraido:
                    dados = extrair_dados_vacinacao_com_cohere(texto_extraido, co_client)
                    if dados:
                        st.session_state.dados_extraidos = dados
                        st.rerun()
                    else: st.error("A IA n√£o conseguiu estruturar os dados. Tente uma imagem melhor.")
                else: st.error("O OCR n√£o conseguiu extrair texto da imagem.")

        if st.session_state.get('dados_extraidos') is not None and st.session_state.get('relatorio_final') is None:
            st.markdown("---")
            st.subheader("2. Valida√ß√£o dos Dados Extra√≠dos")
            st.warning("Verifique e corrija os dados extra√≠dos pela IA antes de prosseguir.")
            with st.form(key="validation_form"):
                dados = st.session_state.dados_extraidos
                nome_validado = st.text_input("Nome do Paciente:", value=dados.get("nome_paciente", ""))
                dn_validada = st.text_input("Data de Nascimento:", value=dados.get("data_nascimento", ""))
                st.write("Vacinas Administradas (edite se necess√°rio):")
                vacinas_validadas_df = pd.DataFrame(dados.get("vacinas_administradas", []))
                vacinas_editadas = st.data_editor(vacinas_validadas_df, num_rows="dynamic")
                if st.form_submit_button("‚úÖ Confirmar Dados e Analisar"):
                    with st.spinner("Analisando..."):
                        relatorio = analisar_carteira_vacinacao(dn_validada, vacinas_editadas.to_dict('records'))
                        st.session_state.relatorio_final = relatorio
                        st.session_state.nome_paciente_final = nome_validado
                        st.session_state.data_nasc_final = dn_validada
                        st.rerun()

        if st.session_state.get('relatorio_final') is not None:
            relatorio = st.session_state.relatorio_final
            st.markdown("---")
            st.subheader(f"3. Relat√≥rio de Situa√ß√£o Vacinal para: {st.session_state.nome_paciente_final}")
            if "erro" in relatorio: st.error(relatorio["erro"])
            else:
                st.success("‚úÖ Vacinas em Dia")
                # ... (c√≥digo de exibi√ß√£o)
                st.warning("‚ö†Ô∏è Vacinas em Atraso")
                # ... (c√≥digo de exibi√ß√£o)
                st.info("üóìÔ∏è Pr√≥ximas Doses")
                # ... (c√≥digo de exibi√ß√£o)
                pdf_bytes = gerar_pdf_relatorio_vacinacao(st.session_state.nome_paciente_final, st.session_state.data_nasc_final, st.session_state.relatorio_final)
                file_name = f"relatorio_vacinacao_{st.session_state.nome_paciente_final.replace(' ', '_')}.pdf"
                st.download_button(label="üì• Descarregar Relat√≥rio (PDF)", data=pdf_bytes, file_name=file_name, mime="application/pdf")

    if st.button("Analisar Nova Caderneta"):
        st.session_state.clear()
        st.rerun()

def main():
    st.sidebar.title("Navega√ß√£o")
    planilha_conectada = conectar_planilha()
    if planilha_conectada is None:
        st.error("A conex√£o com a planilha falhou.")
        st.stop()
    co_client = None
    try:
        co_client = cohere.Client(api_key=st.secrets["COHEREKEY"])
    except Exception as e:
        st.warning(f"N√£o foi poss√≠vel conectar ao servi√ßo de IA. Funcionalidades limitadas. Erro: {e}")

    paginas = {
        "An√°lise de Vacina√ß√£o": lambda: pagina_analise_vacinacao(planilha_conectada, co_client),
        "Coletar Fichas": lambda: pagina_coleta(planilha_conectada, co_client),
        "Gest√£o de Pacientes": lambda: pagina_pesquisa(planilha_conectada),
        "Dashboard": lambda: pagina_dashboard(planilha_conectada),
        "Gerar Etiquetas": lambda: pagina_etiquetas(planilha_conectada),
        "Gerar Capas de Prontu√°rio": lambda: pagina_capas_prontuario(planilha_conectada),
        "Gerar Documentos": lambda: pagina_gerar_documentos(planilha_conectada),
        "Enviar WhatsApp": lambda: pagina_whatsapp(planilha_conectada),
    }
    
    pagina_selecionada = st.sidebar.radio("Escolha uma p√°gina:", paginas.keys())
    paginas[pagina_selecionada]()

if __name__ == "__main__":
    # Suprimindo o c√≥digo completo das fun√ß√µes j√° definidas para brevidade
    # O c√≥digo completo das fun√ß√µes (preencher_pdf_formulario, etc.) est√° omitido aqui
    # mas deve estar presente no seu ficheiro.
    main()
