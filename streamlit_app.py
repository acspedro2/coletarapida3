import streamlit as st
import gspread
import json
import os
import pandas as pd
import google.generativeai as genai
from io import BytesIO
from datetime import datetime
from PIL import Image

# --- Configura√ß√£o da P√°gina e T√≠tulo ---
st.set_page_config(
    page_title="Coleta Inteligente",
    page_icon="ü§ñ",
    layout="wide"
)

st.title("ü§ñ Coleta Inteligente")
st.markdown("---")

# --- CONEX√ÉO E VARI√ÅVEIS DE AMBIENTE ---
try:
    gemini_api_key = st.secrets["GEMINIKEY"]
    google_sheets_id = st.secrets["SHEETSID"]
    google_credentials_dict = st.secrets["gcp_service_account"]
except KeyError as e:
    st.error(f"Erro de configura√ß√£o: A chave secreta '{e.args[0]}' n√£o foi encontrada. Verifique o nome no painel de Secrets do Streamlit Cloud.")
    st.stop()
except Exception as e:
    st.error(f"Erro inesperado ao carregar as chaves secretas. Verifique a formata√ß√£o no painel de Secrets. Erro: {e}")
    st.stop()

# --- FUN√á√ïES ---

@st.cache_resource
def conectar_planilha():
    """Conecta com o Google Sheets usando as credenciais."""
    try:
        gc = gspread.service_account_from_dict(google_credentials_dict)
        planilha = gc.open_by_key(google_sheets_id).sheet1
        return planilha
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel conectar √† planilha. Verifique a ID, as permiss√µes de partilha e o formato das credenciais. Erro: {e}")
        st.stop()

def extrair_dados_com_gemini(image_bytes):
    """Extrai dados da imagem usando a API do Google Gemini."""
    try:
        genai.configure(api_key=gemini_api_key)
        model = genai.GenerativeModel('gemini-pro-vision')
        image_bytes.seek(0)
        image = Image.open(image_bytes)
        prompt = """
        Analise esta imagem de um formul√°rio e extraia as seguintes informa√ß√µes:
        - ID Fam√≠lia, Nome Completo, Data de Nascimento (DD/MM/AAAA), Telefone, CPF, Nome da M√£e, Nome do Pai, Sexo, CNS, Munic√≠pio de Nascimento.
        Se um dado n√£o for encontrado, retorne um campo vazio.
        Retorne os dados estritamente como um objeto JSON.
        Exemplo: {"ID Fam√≠lia": "FAM001", "Nome Completo": "NOME COMPLETO", ...}
        """
        response = model.generate_content([prompt, image])
        json_string = response.text.replace('```json', '').replace('```', '').strip()
        return json.loads(json_string)
    except Exception as e:
        st.error(f"Erro ao extrair dados com Gemini. Verifique a sua chave da API. Erro: {e}")
        return None

def validar_dados_com_gemini(dados_para_validar):
    """Envia os dados extra√≠dos para o Gemini para uma verifica√ß√£o de qualidade."""
    try:
        model = genai.GenerativeModel('gemini-pro')
        prompt_validacao = f"""
        Voc√™ √© um auditor de qualidade de dados de sa√∫de do Brasil. Analise o seguinte JSON de uma ficha de paciente e verifique se h√° inconsist√™ncias √≥bvias.
        Especificamente, verifique:
        1. Se o CPF tem um formato que parece v√°lido (11 d√≠gitos, com ou sem pontua√ß√£o).
        2. Se a Data de Nascimento √© uma data que existe (ex: n√£o √© 30/02/2023) e est√° no passado.
        3. Se o CNS (Cart√£o Nacional de Sa√∫de) tem 15 d√≠gitos.
        Responda APENAS com um objeto JSON. O JSON deve ter uma chave "status_geral" ('V√°lido' ou 'Inv√°lido com avisos') e uma chave "avisos" que √© uma lista de strings em portugu√™s com os problemas encontrados. Se n√£o houver problemas, a lista de avisos deve ser vazia.
        Dados para validar: {json.dumps(dados_para_validar)}
        """
        response = model.generate_content(prompt_validacao)
        json_string = response.text.replace('```json', '').replace('```', '').strip()
        return json.loads(json_string)
    except Exception as e:
        print(f"Erro na valida√ß√£o com Gemini: {e}")
        return {"status_geral": "V√°lido", "avisos": []}

# --- INICIALIZA√á√ÉO E INTERFACE DO APP ---
planilha_conectada = conectar_planilha()

st.header("Envie a imagem da ficha")
uploaded_file = st.file_uploader("Escolha uma imagem", type=['jpg', 'jpeg', 'png'])

if 'dados_extraidos' not in st.session_state:
    st.session_state.dados_extraidos = None

if uploaded_file is not None:
    st.image(uploaded_file, caption="Imagem Carregada.", use_column_width=True)
    
    if st.button("üîé Extrair e Validar Dados"):
        with st.spinner("A IA est√° a analisar a imagem..."):
            st.session_state.dados_extraidos = extrair_dados_com_gemini(uploaded_file)
        
        if st.session_state.dados_extraidos:
            st.success("Dados extra√≠dos!")
            with st.spinner("A IA est√° a verificar a qualidade dos dados..."):
                resultado_validacao = validar_dados_com_gemini(st.session_state.dados_extraidos)
            
            if resultado_validacao and resultado_validacao.get("avisos"):
                st.warning("Aten√ß√£o! A IA encontrou os seguintes poss√≠veis problemas:")
                for aviso in resultado_validacao["avisos"]:
                    st.write(f"- {aviso}")
        else:
            st.error("N√£o foi poss√≠vel extrair dados da imagem.")

if st.session_state.dados_extraidos:
    st.markdown("---")
    st.header("Confirme e corrija os dados antes de enviar")
    
    # Usamos um formul√°rio para agrupar os campos e o bot√£o de envio
    with st.form("formulario_de_correcao"):
        dados = st.session_state.dados_extraidos
        
        # Criamos campos de texto edit√°veis, pr√©-preenchidos com os dados extra√≠dos
        id_familia = st.text_input("ID Fam√≠lia", value=dados.get("ID Fam√≠lia", ""))
        nome_completo = st.text_input("Nome Completo", value=dados.get("Nome Completo", ""))
        data_nascimento = st.text_input("Data de Nascimento", value=dados.get("Data de Nascimento", ""))
        telefone = st.text_input("Telefone", value=dados.get("Telefone", ""))
        cpf = st.text_input("CPF", value=dados.get("CPF", ""))
        nome_mae = st.text_input("Nome da M√£e", value=dados.get("Nome da M√£e", ""))
        nome_pai = st.text_input("Nome do Pai", value=dados.get("Nome do Pai", ""))
        sexo = st.text_input("Sexo", value=dados.get("Sexo", ""))
        cns = st.text_input("CNS", value=dados.get("CNS", ""))
        municipio_nascimento = st.text_input("Munic√≠pio de Nascimento", value=dados.get("Munic√≠pio de Nascimento", ""))

        # O bot√£o de envio fica dentro do formul√°rio
        submitted = st.form_submit_button("‚úÖ Enviar para a Planilha")
        
        if submitted:
            with st.spinner("A enviar os dados..."):
                try:
                    # Prepara a linha com os dados ATUALIZADOS do formul√°rio
                    nova_linha = [
                        id_familia, nome_completo, data_nascimento, telefone, cpf,
                        nome_mae, nome_pai, sexo, cns, municipio_nascimento,
                        datetime.now().strftime('%d/%m/%Y %H:%M:%S')
                    ]
                    
                    planilha_conectada.append_row(nova_linha)
                    st.success("üéâ Dados enviados para a planilha com sucesso!")
                    st.balloons()
                    # Limpa o estado para permitir um novo envio
                    st.session_state.dados_extraidos = None
                except Exception as e:
                    st.error(f"Ocorreu um erro ao enviar os dados para a planilha. Erro: {e}")
