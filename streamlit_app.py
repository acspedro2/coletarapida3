import streamlit as st
import gspread
import json
import os
import pandas as pd
import google.generativeai as genai
from io import BytesIO
from datetime import datetime
from PIL import Image

# --- Configura√ß√£o da P√°gina e T√≠tulo ---
st.set_page_config(
    page_title="Coleta Inteligente",
    page_icon="ü§ñ",
    layout="wide"
)

st.title("ü§ñ Coleta Inteligente")
st.markdown("---")

# --- CONEX√ÉO E VARI√ÅVEIS DE AMBIENTE ---
try:
    gemini_api_key = st.secrets["GEMINIKEY"]
    google_sheets_id = st.secrets["SHEETSID"]
    google_credentials_dict = st.secrets["gcp_service_account"]
except KeyError as e:
    st.error(f"Erro de configura√ß√£o: A chave secreta '{e.args[0]}' n√£o foi encontrada. Verifique o nome no painel de Secrets do Streamlit Cloud.")
    st.stop()
except Exception as e:
    st.error(f"Erro inesperado ao carregar as chaves secretas. Verifique a formata√ß√£o no painel de Secrets. Erro: {e}")
    st.stop()

# --- FUN√á√ïES ---

@st.cache_resource
def conectar_planilha():
    """Conecta com o Google Sheets usando as credenciais."""
    try:
        gc = gspread.service_account_from_dict(google_credentials_dict)
        planilha = gc.open_by_key(google_sheets_id).sheet1
        return planilha
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel conectar √† planilha. Verifique a ID, as permiss√µes de partilha e o formato das credenciais. Erro: {e}")
        st.stop()

@st.cache_data(ttl=60)
def ler_dados_da_planilha(_planilha):
    """L√™ todos os dados da planilha e retorna como DataFrame do Pandas."""
    try:
        dados = _planilha.get_all_records()
        return pd.DataFrame(dados)
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel ler os dados da planilha para o dashboard. Erro: {e}")
        return pd.DataFrame()

def extrair_dados_com_gemini(image_bytes):
    # (Esta fun√ß√£o permanece a mesma da vers√£o anterior)
    try:
        genai.configure(api_key=gemini_api_key)
        model = genai.GenerativeModel('gemini-pro-vision')
        image_bytes.seek(0)
        image = Image.open(image_bytes)
        prompt = """
        Analise esta imagem de um formul√°rio e extraia as seguintes informa√ß√µes:
        - ID Fam√≠lia, Nome Completo, Data de Nascimento (DD/MM/AAAA), Telefone, CPF, Nome da M√£e, Nome do Pai, Sexo, CNS, Munic√≠pio de Nascimento.
        Se um dado n√£o for encontrado, retorne um campo vazio. Retorne os dados estritamente como um objeto JSON.
        Exemplo: {"ID Fam√≠lia": "FAM001", "Nome Completo": "NOME COMPLETO", ...}
        """
        response = model.generate_content([prompt, image])
        json_string = response.text.replace('```json', '').replace('```', '').strip()
        return json.loads(json_string)
    except Exception as e:
        st.error(f"Erro ao extrair dados com Gemini. Verifique a sua chave da API. Erro: {e}")
        return None

def validar_dados_com_gemini(dados_para_validar):
    # (Esta fun√ß√£o permanece a mesma da vers√£o anterior)
    try:
        model = genai.GenerativeModel('gemini-pro')
        prompt_validacao = f"""
        Voc√™ √© um auditor de qualidade de dados de sa√∫de do Brasil. Analise o seguinte JSON e verifique se h√° inconsist√™ncias √≥bvias (CPF, Data de Nascimento, CNS).
        Responda APENAS com um objeto JSON com uma chave "avisos" que √© uma lista de strings em portugu√™s com os problemas encontrados. Se n√£o houver problemas, a lista deve ser vazia.
        Dados para validar: {json.dumps(dados_para_validar)}
        """
        response = model.generate_content(prompt_validacao)
        json_string = response.text.replace('```json', '').replace('```', '').strip()
        return json.loads(json_string)
    except Exception as e:
        print(f"Erro na valida√ß√£o com Gemini: {e}")
        return {"avisos": []}

# --- NOVA FUN√á√ÉO DE AN√ÅLISE ---
def analisar_dados_com_gemini(pergunta_usuario, dataframe):
    """Usa o Gemini para responder perguntas sobre os dados da planilha."""
    if dataframe.empty:
        return "N√£o h√° dados na planilha para analisar."
    
    # Converte o dataframe para uma string para enviar no prompt
    dados_string = dataframe.to_string()
    
    model = genai.GenerativeModel('gemini-pro')
    
    prompt_analise = f"""
    Voc√™ √© um assistente de an√°lise de dados. Sua tarefa √© responder √† pergunta do utilizador com base nos dados da tabela fornecida.
    Seja claro, direto e responda apenas com base nos dados.

    Pergunta do utilizador: "{pergunta_usuario}"

    Dados da Tabela:
    {dados_string}
    """
    
    try:
        response = model.generate_content(prompt_analise)
        return response.text
    except Exception as e:
        return f"Ocorreu um erro ao analisar os dados com a IA. Erro: {e}"


# --- INICIALIZA√á√ÉO ---
planilha_conectada = conectar_planilha()

# --- NAVEGA√á√ÉO E P√ÅGINAS ---
