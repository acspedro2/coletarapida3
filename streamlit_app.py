import streamlit as st
import requests
import json
import cohere
import gspread
from PIL import Image
import time
import re
import pandas as pd
from datetime import datetime

# --- Interface Streamlit ---
st.set_page_config(page_title="Coleta Inteligente", page_icon="ü§ñ", layout="wide")
st.title("ü§ñ COLETA INTELIGENTE")

# --- Fun√ß√µes de Valida√ß√£o ---
def validar_cpf(cpf: str) -> bool:
    cpf = ''.join(re.findall(r'\d', str(cpf)))
    if not cpf or len(cpf) != 11 or cpf == cpf[0] * 11: return False
    try:
        soma = sum(int(cpf[i]) * (10 - i) for i in range(9)); d1 = (soma * 10 % 11) % 10
        if d1 != int(cpf[9]): return False
        soma = sum(int(cpf[i]) * (11 - i) for i in range(10)); d2 = (soma * 10 % 11) % 10
        if d2 != int(cpf[10]): return False
    except: return False
    return True

def validar_data_nascimento(data_str: str) -> (bool, str):
    try:
        data_obj = datetime.strptime(data_str, '%d/%m/%Y').date()
        if data_obj > datetime.now().date(): return False, "A data de nascimento est√° no futuro."
        return True, ""
    except ValueError: return False, "O formato da data deve ser DD/MM/AAAA."

# --- Fun√ß√µes de Conex√£o e API ---

@st.cache_resource
def conectar_planilha():
    try:
        creds = st.secrets["gcp_service_account"]
        client = gspread.service_account_from_dict(creds)
        sheet = client.open_by_key(st.secrets["SHEETSID"]).sheet1
        return sheet
    except Exception as e:
        st.error(f"Erro ao conectar com o Google Sheets: {e}"); return None

@st.cache_data(ttl=300) # Aumenta o cache para 5 minutos
def ler_dados_da_planilha(_planilha):
    try:
        dados = _planilha.get_all_records()
        df = pd.DataFrame(dados)
        colunas_esperadas = ["ID", "FAM√çLIA", "Nome Completo", "Data de Nascimento", "Telefone", "CPF", "Nome da M√£e", "Nome do Pai", "Sexo", "CNS", "Munic√≠pio de Nascimento"]
        for col in colunas_esperadas:
            if col not in df.columns: df[col] = ""
        df['Data de Nascimento DT'] = pd.to_datetime(df['Data de Nascimento'], format='%d/%m/%Y', errors='coerce')
        df['Idade'] = df['Data de Nascimento DT'].apply(lambda dt: calcular_idade(dt) if pd.notnull(dt) else 0)
        return df
    except Exception as e:
        st.error(f"Erro ao ler os dados da planilha: {e}"); return pd.DataFrame()

def calcular_idade(data_nasc):
    if pd.isna(data_nasc): return 0
    hoje = datetime.now()
    return hoje.year - data_nasc.year - ((hoje.month, hoje.day) < (data_nasc.month, data_nasc.day))

def ocr_space_api(file_bytes, ocr_api_key):
    try:
        url = "https://api.ocr.space/parse/image"
        payload = {"language": "por", "isOverlayRequired": False, "OCREngine": 2}
        files = {"file": ("ficha.jpg", file_bytes, "image/jpeg")}
        headers = {"apikey": ocr_api_key}
        response = requests.post(url, data=payload, files=files, headers=headers)
        response.raise_for_status()
        result = response.json()
        if result.get("IsErroredOnProcessing"): st.error(f"Erro no OCR: {result.get('ErrorMessage')}"); return None
        return result["ParsedResults"][0]["ParsedText"]
    except Exception as e:
        st.error(f"Erro inesperado no OCR: {e}"); return None

def extrair_dados_com_cohere(texto_extraido: str, cohere_client):
    try:
        prompt = f"""
        Sua tarefa √© extrair informa√ß√µes de um texto de formul√°rio de sa√∫de e convert√™-lo para um JSON.
        Instru√ß√£o Cr√≠tica: Procure por uma anota√ß√£o √† m√£o que pare√ßa um c√≥digo de fam√≠lia (ex: 'FAM111'). Este c√≥digo deve ir para a chave "FAM√çLIA".
        Retorne APENAS um objeto JSON com as chaves: 'ID', 'FAM√çLIA', 'Nome Completo', 'Data de Nascimento', 'Telefone', 'CPF', 'Nome da M√£e', 'Nome do Pai', 'Sexo', 'CNS', 'Munic√≠pio de Nascimento'.
        Se um valor n√£o for encontrado, retorne uma string vazia "".
        Texto para analisar: --- {texto_extraido} ---
        """
        response = cohere_client.chat(model="command-r-plus", message=prompt, temperature=0.1)
        json_string = response.text.replace('```json', '').replace('```', '').strip()
        return json.loads(json_string)
    except Exception as e:
        st.error(f"Erro ao chamar a API do Cohere: {e}"); return None

def salvar_no_sheets(dados, planilha):
    try:
        cabecalhos = planilha.row_values(1)
        nova_linha = [dados.get(cabecalho, "") for cabecalho in cabecalhos]
        planilha.append_row(nova_linha)
        st.success(f"‚úÖ Dados de '{dados.get('Nome Completo', 'Desconhecido')}' salvos com sucesso!")
        st.balloons()
    except Exception as e:
        st.error(f"Erro ao salvar na planilha: {e}")

# --- P√ÅGINAS DO APP ---

def pagina_coleta(planilha):
    st.header("1. Envie uma ou mais imagens de fichas")
    uploaded_files = st.file_uploader("Pode selecionar v√°rios arquivos de uma vez", type=["jpg", "jpeg", "png"], accept_multiple_files=True)

    if 'processados' not in st.session_state:
        st.session_state.processados = []

    if uploaded_files:
        for uploaded_file in uploaded_files:
            if uploaded_file.file_id in st.session_state.processados:
                continue

            st.subheader(f"Processando Ficha: `{uploaded_file.name}`")
            st.image(Image.open(uploaded_file), width=400)
            
            file_bytes = uploaded_file.getvalue()
            with st.spinner("Lendo o texto (OCR)..."):
                texto_extraido = ocr_space_api(file_bytes, st.secrets["OCRSPACEKEY"])
            
            if texto_extraido:
                with st.spinner("Estruturando os dados (IA)..."):
                    dados_extraidos = extrair_dados_com_cohere(texto_extraido, st.session_state.co_client)
                
                if dados_extraidos:
                    with st.form(key=f"form_{uploaded_file.file_id}"):
                        st.subheader("2. Confirme e salve os dados")
                        
                        id_val = st.text_input("ID", value=dados_extraidos.get("ID", "")); familia_val = st.text_input("FAM√çLIA", value=dados_extraidos.get("FAM√çLIA", ""))
                        nome_completo = st.text_input("Nome Completo", value=dados_extraidos.get("Nome Completo", ""))
                        
                        data_nascimento = st.text_input("Data de Nascimento", value=dados_extraidos.get("Data de Nascimento", ""))
                        is_data_valida, erro_data = validar_data_nascimento(data_nascimento)
                        if not is_data_valida and data_nascimento: st.warning(f"‚ö†Ô∏è {erro_data}")
                        
                        cpf = st.text_input("CPF", value=dados_extraidos.get("CPF", ""))
                        if not validar_cpf(cpf) and cpf: st.warning("‚ö†Ô∏è O CPF parece ser inv√°lido.")
                        
                        telefone = st.text_input("Telefone", value=dados_extraidos.get("Telefone", "")); nome_mae = st.text_input("Nome da M√£e", value=dados_extraidos.get("Nome da M√£e", "")); nome_pai = st.text_input("Nome do Pai", value=dados_extraidos.get("Nome do Pai", "")); sexo = st.text_input("Sexo", value=dados_extraidos.get("Sexo", "")); cns = st.text_input("CNS", value=dados_extraidos.get("CNS", "")); municipio_nascimento = st.text_input("Munic√≠pio de Nascimento", value=dados_extraidos.get("Munic√≠pio de Nascimento", ""))
                        
                        submitted = st.form_submit_button("‚úÖ Salvar Dados Desta Ficha")
                        
                        if submitted:
                            dados_para_salvar = {
                                'ID': id_val, 'FAM√çLIA': familia_val, 'Nome Completo': nome_completo,
                                'Data de Nascimento': data_nascimento, 'Telefone': telefone, 'CPF': cpf,
                                'Nome da M√£e': nome_mae, 'Nome do Pai': nome_pai, 'Sexo': sexo, 'CNS': cns,
                                'Munic√≠pio de Nascimento': municipio_nascimento
                            }
                            salvar_no_sheets(dados_para_salvar, planilha)
                            st.session_state.processados.append(uploaded_file.file_id)
                            st.rerun()
            else: st.error("A IA n√£o conseguiu extrair dados deste texto.")
            with st.spinner("Aguardando 20 segundos antes da pr√≥xima ficha..."): time.sleep(20)
            break
        else: st.error("N√£o foi poss√≠vel extrair texto desta imagem.")
        break

# --- NOVA P√ÅGINA: DASHBOARD ---
def pagina_dashboard(planilha):
    st.header("üìä Dashboard de Dados")
    df = ler_dados_da_planilha(planilha)

    if df.empty:
        st.warning("Ainda n√£o h√° dados na planilha para exibir.")
        return

    st.markdown("### M√©tricas Gerais")
    col1, col2, col3 = st.columns(3)
    col1.metric("Total de Fichas", len(df))
    # Calcula idade m√©dia apenas para idades v√°lidas (>0)
    idade_media = df[df['Idade'] > 0]['Idade'].mean()
    col2.metric("Idade M√©dia", f"{idade_media:.1f} anos" if idade_media > 0 else "N/A")
    
    # Contagem por sexo
    sexo_counts = df['Sexo'].str.capitalize().value_counts()
    col3.metric("Sexo (Moda)", sexo_counts.index[0] if not sexo_counts.empty else "N/A")

    st.markdown("### Pacientes por Munic√≠pio")
    municipio_counts = df['Munic√≠pio de Nascimento'].value_counts()
    if not municipio_counts.empty:
        st.bar_chart(municipio_counts)
    else:
        st.info("N√£o h√° dados de munic√≠pio para exibir.")

    st.markdown("### Distribui√ß√£o de Idades")
    idades_validas = df[df['Idade'] > 0]['Idade']
    if not idades_validas.empty:
        st.bar_chart(idades_validas.value_counts().sort_index())
    else:
        st.info("N√£o h√° dados de idade para exibir.")

# --- NOVA P√ÅGINA: PESQUISA ---
def pagina_pesquisa(planilha):
    st.header("üîé Ferramenta de Pesquisa")
    df = ler_dados_da_planilha(planilha)

    if df.empty:
        st.warning("Ainda n√£o h√° dados na planilha para pesquisar.")
        return

    colunas_pesquisaveis = ["Nome Completo", "CPF", "CNS", "Nome da M√£e"]
    coluna_selecionada = st.selectbox("Pesquisar em:", colunas_pesquisaveis)

    termo_pesquisa = st.text_input("Digite o termo que deseja procurar:")

    if termo_pesquisa:
        # Filtra o DataFrame, garantindo que a coluna √© do tipo string e tratando valores nulos
        resultados = df[df[coluna_selecionada].astype(str).str.contains(termo_pesquisa, case=False, na=False)]
        st.markdown(f"**{len(resultados)}** resultado(s) encontrado(s):")
        st.dataframe(resultados)
    else:
        st.markdown("Todos os registos:")
        st.dataframe(df)

# --- L√ìGICA PRINCIPAL DE EXECU√á√ÉO (com menu) ---
def main():
    try:
        st.session_state.co_client = cohere.Client(api_key=st.secrets["COHEREKEY"])
        planilha_conectada = conectar_planilha()
    except Exception as e:
        st.error(f"N√£o foi poss√≠vel inicializar os servi√ßos. Verifique seus segredos. Erro: {e}")
        st.stop()
    
    st.sidebar.title("Navega√ß√£o")
    paginas = {
        "Coletar Fichas": pagina_coleta,
        "Dashboard": pagina_dashboard,
        "Pesquisar Paciente": pagina_pesquisa,
    }
    pagina_selecionada = st.sidebar.radio("Escolha uma p√°gina:", paginas.keys())
    
    if planilha_conectada is not None:
        paginas[pagina_selecionada](planilha_conectada)
    else:
        st.error("A conex√£o com a planilha falhou. N√£o √© poss√≠vel carregar a p√°gina.")

if __name__ == "__main__":
    main()

